#!/bin/sh

###########################################
# Remove unknown option for all vcxproj
#

for f in $(find . -name "*.vcxproj")
do
  echo "Patching $f"
  #
  # clang cannot be accept these options generated by cmake.
  #
  grep 'w14062 /Zc:inline' $f > /dev/null
  if [ $? -eq 0 ]
  then
#    sed -e 's; -w14062 /Zc:inline /EHs-c- ;;' -e 's; -target x86_64-pc-windows-msvc -isysroot -L; -L;' $f  > tmp.out
    sed \
      -e 's; -w14062 /Zc:inline;;' -e 's; /EHs-c-;;' \
      -e 's; -target x86_64-pc-windows-msvc -isysroot -L; -L;' \
      -e 's;-Wl,--allow-multiple-definition ;;' \
      -e 's;-L.*$(Configuration)/lib/swift/windows ;;' \
      -e 's;-L.*$(Configuration)/lib/swift/windows/x86_64 ;;' \
      -e 's;-L.*$(Configuration)/bin/../lib/swift/windows ;;' \
      -e 's;-L.*$(Configuration)/bin/../lib/swift/windows/x86_64 ;;' \
      $f > tmp.out
    mv tmp.out $f
  fi

  #
  # HAS_EXCEPTIONS macro is generated by cmake
  # for this, some error occured when including <functional> header
  #
  grep '_HAS_EXCEPTIONS=0' $f > /dev/null
  if [ $? -eq 0 ]
  then
    sed -e 's/_HAS_EXCEPTIONS=0;//g' $f  > tmp.out
    mv tmp.out $f
  fi

  #
  # -fexceptions is generated by cmake
  # for this, an error occured at swiftIRGen
  #
  grep 'fexceptions' $f > /dev/null
  if [ $? -eq 0 ]
  then
    sed -e 's/ -fexceptions//g' $f  > tmp.out
    mv tmp.out $f
  fi

  #
  # __STDC__=0 is required for typdef _off_t off_t
  # for this, suppress the warning macro redefined 
  #
  grep 'WIN32;' $f > /dev/null
  if [ $? -eq 0 ]
  then
    sed -e 's/WIN32;/__STDC__=0;WIN32;/' $f  > tmp.out
    mv tmp.out $f
  fi
  grep 'target x86_64' $f > /dev/null
  if [ $? -eq 0 ]
  then
    sed -e 's/windows-msvc -isysroot/windows-msvc -Wno-macro-redefined -isysroot/' $f  > tmp.out
    mv tmp.out $f
  fi

  #
  # Remove -fms-compatibility
  #
  grep 'fms-compatibility' $f > /dev/null
  if [ $? -eq 0 ]
  then
    sed -e 's/-fms-compatibility /-gdwarf-2 /' $f > tmp.out
    mv tmp.out $f
  fi

  #
  # Insert LARGEADDRESSAWARE for LINK option
  #
#  grep 'machine:x64' $f > /dev/null
#  if [ $? -eq 0 ]
#  then
#    sed -e 's;machine:x64 ;machine:x64 /LARGEADDRESSAWARE:NO ;' $f > tmp.out
#    mv tmp.out $f
#  fi
done


###########################################
# Etc vcxproj
#

for SWIFT_PROJ in \
  tools/swift-llvm-opt/swift-llvm-opt.vcxproj \
  tools/sil-opt/sil-opt.vcxproj \
  tools/sil-extract/sil-extract.vcxproj \
  tools/lldb-moduleimport-test/lldb-moduleimport-test.vcxproj
do
  echo "Patching $SWIFT_PROJ"
  sed \
    -e 's;libclang\([^.]*\).a;clang\1.lib;g' \
	-e 's;swift\\libcmark.a;build\\firsttime\\cmark\\src\\Release\\cmark.lib;g' \
	$SWIFT_PROJ > tmp.out

  mv tmp.out $SWIFT_PROJ
done


###########################################
# swift.vcxproj
#

export SWIFT_PROJ=tools/driver/swift.vcxproj

echo "Patching $SWIFT_PROJ"
sed \
  -e 's;libclang\([^.]*\).a;clang\1.lib;g' \
  -e 's;swift\\libcmark.a;build\\firsttime\\cmark\\src\\Release\\cmark.lib;g' \
  -e 's;\;edit.lib;;g' \
  -e 's;swift swiftc;swift.exe swiftc.exe;' \
  -e 's;swift swift-autolink-extract;swift.exe swift-autolink-extract.exe;' \
	$SWIFT_PROJ > tmp.out

mv tmp.out $SWIFT_PROJ

